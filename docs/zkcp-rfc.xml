<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2253 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2253.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4422 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml">
<!ENTITY RFC5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC7414 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7414.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-zkcp-rfc" ipr="noDerivativesTrust200902">

  <front>
    <title abbrev="ZooKeeper Client Protocol">ZooKeeper Client Protocol</title>

    <author fullname="Diego Ongaro" role="editor" surname="Ongaro">
      <organization>Salesforce</organization>
      <address>
        <postal>
          <street>The Landmark @ One Market</street>
          <street>Suite 300</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94105</code>
          <country>USA</country>
        </postal>
        <email>dongaro@salesforce.com</email>
      </address>
    </author>

    <date year="2016" month="October" />

    <area>General</area>

    <!-- Later: Internet Engineering Task Force? -->
    <workgroup>Salesforce Internal </workgroup>

    <abstract>
      <t>This document is a draft describing the protocol used between Apache ZooKeeper (TM) clients and servers to query and manipulate data stored in a ZooKeeper cluster.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>ZooKeeper stores coordination data on a group of servers for clients to access. This data takes the form of a hierarchical key-value store, as described in <xref target="data-model" />. Clients access and modify the data by connecting to any server in the group and issuing requests.</t>

      <t>ZooKeeper clients typically access ZooKeeper servers using a client library, such as the Java or C clients included in Apache ZooKepeer or an "unofficial" client library. While several unofficial client libraries exist, the protocol they use has not been documented precisely until now. This RFC aims to document the existing protocol to promote interoperability across client and server implementations.</t>

      <t>ZooKeeper clients and servers exchange discrete <spanx>packets</spanx> over <xref target="RFC7414">TCP</xref> connections. They frame each packet by prepending the length of the packet, as described in <xref target="framing" />. The contents of each packet are encoded using a format called Jute, as described in <xref target="jute" />.</t>

      <t>ZooKeeper clients initiate and maintain sessions with the servers, as described in <xref target="sessions" />. Within a valid session, they may send various requests, described in <xref target="requests" />, to query and modify the ZooKepeer data. They may also receive notifications from servers about changes in the data, as described in <xref target="notifications" />.</t>

      <section title="Conventions">
        <t>The terminology used in Apache ZooKeeper is preferred.</t>

        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref
          target="RFC2119" />.</t>

        <t>This RFC attempts to document an existing protocol, so whether implementations "SHOULD" or "MUST" behave particular ways is a matter of opinion in many cases. This RFC aims to use "MUST" or similar terms where differing behavior could possibly cause existing releases of Apache ZooKeeper or reasonable clients to misbehave, and it conservatively uses "SHOULD" or similar terms otherwise.</t>
        </section>
      </section>

      <section anchor="data-model" title="Data Model">
        <t>The servers maintain a tree data structure, where each node in the tree is called a znode. A znode can store a byte array of uninterpreted data, it can have named child znodes, or both.</t>

        <t>TODO: Types of znodes: normal, epehemeral, and container.</t>

        <section title="Znode Stats">
          <t>The servers MUST maintain the following information for each znode, called a Stat structure. Of course, server implementations MAY use this representation internally or they MAY compute Stat structures when required.</t>

          <figure>
            <artwork><![CDATA[
  struct Stat {
    sint64 czxid
    sint64 mzxid
    sint64 ctime
    sint64 mtime
    sint32 version
    sint32 cversion
    sint32 aversion
    sint64 ephemeralOwner
    sint32 dataLength
    sint32 numChildren
    sint64 pzxid
  }
            ]]></artwork>
          </figure>

          <t>The server MUST set czxid to the zxid of the request that created the znode <cref>TestZKCP_Stat_create</cref>. A zxid is assigned by the server and uniquely identifies a request, as described in ???.</t>

          <t>The server MUST set mzxid to the zxid of the request that last set the znode's data field (even if it was set the same as before). If the znode's data has never been explicitly set, the server MUST set mzxid to the zxid of the request that created the znode. <cref>TestZKCP_Stat_mod</cref></t>

          <t>The server MUST set ctime to the approximate number of milliseconds elapsed since the Unix epoch when the znode was created. <cref>TestZKCP_Stat_create</cref></t>

          <t>The server MUST set mtime to the approximate number of milliseconds elapsed since the Unix epoch when the znode's data field was last set (even if it was set the same as before). If the znode's data has never been explicitly set, the server MUST set mtime the same as the znode's ctime. <cref>TestZKCP_Stat_mod</cref></t>

          <t>The server MUST set version to the number of requests which have set the znode's data field (even if it was set the same as before), excluding the request which created the znode. If the znode's data has never been explicitly set, the server MUST set version to 0. <cref>TestZKCP_Stat_mod</cref></t>

          <t>The server MUST set cversion to the number of requests which have created or deleted direct children of the znode. The server MUST set cverson to 0 for newly created znodes. <cref>TestZKCP_Stat_children</cref></t>

          <t>The server MUST set aversion to the number of requests which have changed the znode's ACL (even if it was set the same as before), excluding the request which created the znode. The server MUST set aversion to 0 for newly created znodes. <cref>TestZKCP_Stat_acl</cref></t>

          <t>If the znode is ephemeral, the server MUST set ephemeralOwner to the session ID of the request which created the znode. If the znode is not ephemeral or is a container znodes, the server MUST set ephemeralOwner to 0. <cref>TestZKCP_Stat_ephemeral</cref></t>

          <t>The server MUST set dataLength to the length in bytes of the opaque data stored in the znode (possibly 0). <cref>TestZKCP_Stat_dataLength</cref></t>

          <t>The server MUST set numChildren to the count of the direct child znodes which this znode contains (possibly 0). <cref>TestZKCP_Stat_children</cref></t>

          <t>The server MUST set pzxid to the zxid of the request which last added or removed direct child znodes from this znode. If the znode's data has never had children, the server MUST set pzxid to the zxid of the request that created the znode. <cref>TestZKCP_Stat_children</cref></t>

          <t>TODO: how are transactions counted?</t>

          <t>TODO: overflow</t>
        </section>

        <section title="Access Control Lists (ACLs)">
          <t>Each znode has an ordered list of access control rules, which are defined as follows:</t>

          <figure>
            <artwork><![CDATA[
  struct ACL {
    sint32   perms
    Identity identity
  }
            ]]></artwork>
          </figure>

          <t>perms is the bitwise OR of the following values:</t>

          <texttable>
            <ttcol>perms Value</ttcol><ttcol>Permission</ttcol>
            <c>1</c><c>read: identity may read data from the znode and list its direct children</c>
            <c>2</c><c>write: identity may set data for the znode</c>
            <c>4</c><c>create: identity may add direct child znodes</c>
            <c>8</c><c>delete: identity may delete direct child znodes</c>
            <c>16</c><c>admin: identity may change the ACL for the znode</c>
          </texttable>

          <t>The server SHOULD not check ACLs of ancestor znodes during path lookups.</t>

          <t>The server SHOULD return the Stat for any znode to any identity who requests it.</t>

          <t>The Identity is defined as follows:</t>

          <figure>
            <artwork><![CDATA[
  struct Identity {
    ustring scheme
    ustring id
  }
            ]]></artwork>
          </figure>

          <t>The following subsections describe the defined schemes.</t>

          <section title="Scheme: world">
            <t>Servers SHOULD support a "world" scheme that has a single id called "anyone", which represents any client.</t>
          </section>

          <section title="Scheme: auth">
            <t>Servers SHOULD support an "auth" scheme that represents any authenticated client. For the "auth" scheme, servers SHOULD ignore the id.</t>

            <t>Does IP-based authentication count?</t>
          </section>

          <section title="Scheme: digest">
            <t>Servers MAY support a "digest" scheme. TODO: meaning?</t>
          </section>

          <section title="Scheme: ip">
            <t>Servers MAY support an "ip" scheme, which uses the client's IP address as its id.</t>

            <t>Servers SHOULD automatically grant clients this identity when it is available (clients SHOULD NOT need to request it explicitly).</t>

            <t>ACL permissions MAY mask the address by appending "/n", where n is an integer number of most significant bits to check.</t>

            <t>TODO: IPv4 only?</t>
          </section>

          <section title="Scheme: x509">
            <t>Servers MAY support an "x509" scheme, which uses the X.509 subject of the child's certificate. A string representation of the X.500 distinguished name is used as the client's id, using the format defined in <xref target="RFC2253" />.</t>

            <t>Servers SHOULD automatically grant clients this identity when it is available (clients SHOULD NOT need to request it explicitly).</t>
          </section>
        </section>
      </section>


      <section anchor="framing" title="Packet Framing">
        <t>Every packet sent by a ZooKeeper client or server is preceded by 4 bytes indicating the length of the data in the packet. The length is encoded in network byte order (big endian).</t>

        <t>TODO: is 0 length ok? how big can a packet be?</t>

        <figure align="left">
          <artwork align="left"><![CDATA[
+-----------+----------------+
|  length   |     data       |
| (4 bytes) | (length bytes) |
+-----------+----------------+]]></artwork>
        </figure>
      </section>

      <section anchor="jute" title="Jute Encoding">
        <t>Jute is a simple encoding scheme that assumes the recipient knows the exact schema for the data. The following types are defined and used in the ZooKeeper client protocol.</t>

        <section title="Booleans">
          <t>True is encoded as a single byte with value 1. False is encoded as the single byte with value 0.</t>
        </section>

        <section title="Signed Integers">
          <t>A 32-bit signed integer is encoded as four bytes in network byte order. A 64-bit signed integer is encoded as eight bytes in network byte order.</t>
        </section>

        <section title="Strings and Byte Arrays">
          <t>A string or byte array is encoded as its length in bytes as a 32-bit signed integer, followed by the bytes themselves. TODO: or is it length in unichode char points for strings?</t>

          <t>A byte array of 0 length is encoded as the four bytes 0xFF 0xFF 0xFF 0xFF. TODO: really? why?</t>
        </section>

        <section title="Arrays">
          <t>An array is encoded as its number of elements as a 32-bit signed integer, followed by each element in turn.</t>
        </section>

        <section title="Structs">
          <t>Structs are encoded as each field in turn in the order specified. As there is no special header, footer, or delimiter, some structs exist for documentation purposes only.</t>
        </section>
      </section>

      <section anchor="sessions" title="Session Management">

        <section title="Connection Setup">

          <t>Clients connect to a server of their choice over TCP and immediately issue a Connect Request (preceded by the size in bytes of the Connect Request, as described in <xref target="framing" />, and encoded with Jute, as described in <xref target="jute" />). Clients MUST send either a ConnectRequestV1 or a ConnectRequestV2, which adds an additional 'readOnly' field.</t>

          <t>The first time a client connects, this establishes a session with the servers. The client MAY continue that session on subsequent connections by using the same session ID and password previously assigned by the server.</t>

          <figure>
            <artwork><![CDATA[
  struct ConnectRequestV1 {
    sint32 protocolVersion
    sint64 lastZxidSeen
    sint32 timeout
    sint64 sessionID
    byte[] passwd
  }
            ]]></artwork>
          </figure>
          <figure>
            <artwork><![CDATA[
  struct ConnectRequestV2 {
    sint32 protocolVersion
    sint64 lastZxidSeen
    sint32 timeout
    sint64 sessionID
    byte[] passwd
    bool   readOnly
  }
            ]]></artwork>
          </figure>

          <t>The client MUST set protocolVersion to 0. No other protocol version has yet been defined.</t>

          <t>The client MUST either set lastZxidSeen to 0 or to any zxid previously returned by any server. <cref>TestZKCP_connect_barelyTolerable2, TestZKCP_connect_lastZxidTooHigh</cref></t>

          <t>For an initial connection with no existing session, the client MUST set sessionID to 0 and SHOULD set passwd to an empty array or a 16-byte array of zeros <cref>TestZKCP_connect_barelyTolerable, TestZKCP_connect_barelyTolerable2, TestZKCP_connect_badSessionID</cref>. To reconnect with an existing session, the client MUST set the sessionID and passwd fields to those provided by the server in an earlier Connect Response <cref>TestZKCP_connect_badSessionID, TestZKCP_connect_badPassword</cref>.</t>

          <t>The client MAY set timeout to a positive integer representing the desired duration for the client's session timeout, measured in milliseconds.</t>

          <t>TODO: what does readOnly mean?</t>

          <t>The server MUST respond to a ConnectRequestV1 with a ConnectRequestV1, if it responds at all. The server MUST respond to a ConnectRequestV2 with either a ConnectResponseV1 or a ConnectResponseV2, if it responds at all. Either response MUST be preceded by its length, as described in <xref target="framing" />, and encoded with Jute, as described in <xref target="jute" />.</t>

          <figure>
            <artwork><![CDATA[
  struct ConnectResponseV1 {
    sint32 protocolVersion
    sint32 timeout
    sint64 sessionID
    byte[] passwd
  }
            ]]></artwork>
          </figure>
          <figure>
            <artwork><![CDATA[
  struct ConnectResponseV2 {
    sint32 protocolVersion
    sint32 timeout
    sint64 sessionID
    byte[] passwd
    bool   readOnly
  }
            ]]></artwork>
          </figure>

          <t>The server MUST accept any protocolVersion in the request <cref>TestZKCP_connect_barelyTolerable, TestZKCP_connect_barelyTolerable2</cref>. The server MUST set protocolVersion to 0 in the response.</t>

          <t>The server MUST accept any timeout in the request <cref>TestZKCP_connect_barelyTolerable, TestZKCP_connect_barelyTolerable2</cref> but MAY choose a different value. It MUST set timeout in the response to a positive integer representing the actual duration of the client's session timeout, measured in milliseconds.</t>

          <t>If the lastZxidSeen in the request is not 0 and has not been returned by any server previously, the server MAY close the TCP connection instead of replying. <cref>TestZKCP_connect_lastZxidTooHigh</cref></t>

          <t>If the sessionID in the request is 0 and the request has a non-zero passsword, the server MAY close the connection or return a sessionID of 0, or it MAY continue as if the password was zero.</t>

          <t>If the sessionID in the request is 0 and the request has a zero password (of reasonable length), the server MUST set sessionID to a positive integer that opaquely identifies the client's new session. It MUST set passwd to a value that is difficult for other clients to guess, which SHOULD be 16 bytes in length. <cref>TestZKCP_connect_ok</cref></t>

          <t>If the sessionID in the request is non-zero but does not identify a valid session or if the sessionID in the request is non-zero but the password does not match that of the identified session, the server MAY either close the connection or return with the sessionID set to 0 and the passwd set to zeros (and deny further requests). <cref>TestZKCP_connect_badSessionID, TestZKCP_connect_badPassword</cref></t>

          <t>If the sessionID in the request is non-zero and identifies a valid session for which the password in the request matches, the server MUST set sessionID and passwd in the response the same as the request. In this case, the servers SHOULD disconnect previous connections sharing the same session. <cref>TestZKCP_connect_ok</cref></t>

          <t>TODO: what does readOnly mean?</t>

          <t>After receiving a Connect Response with a nonzero sessionID, the client MAY issue requests, as described in <xref target="requests" />.</t>
        </section>

        <section anchor="expiration" title="Session Expiration">
          <t>To maintian its session, a client MUST make requests more frequently than its session timeout. If a client has nothing to do, it SHOULD issue Ping requests, as described in <xref target="ping-request" />.</t>

          <t>The servers SHOULD expire a client's session if they have not received any requests from that client after the duration of its session timeout. They MAY grant the client additional grace period(s) beyond the client's session tiemout.</t>
        </section>

        <section anchor="ping-request" title="Ping">
          <t>A client SHOULD issue Ping requests during periods of inactivity to maintain its session (see <xref target="expiration" />).</t>

          <t>Ping requests and responses are formatted just like normal requests and responses (<xref target="requests" />) except that they MUST use xid -2. <cref>TestZKCP_connect_pingWithNormalXid</cref></t>

          <t>PingRequest and PingResponse are both empty, thus serializing as zero bytes with Jute encoding (<xref target="jute" />).</t>

          <figure>
            <artwork><![CDATA[
  struct PingRequest {
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct PingResponse {
  }
            ]]></artwork>
          </figure>
        </section>

      </section>

      <section anchor="requests" title="Requests">

        <t>Clients SHOULD issue requests of the following form on an established connection:</t>

        <figure>
          <artwork><![CDATA[
  +-----------+-----------------+-----------+
  |  length   |  RequestHeader  |  request  |
  +-----------+-----------------+-----------+]]></artwork>
        </figure>

        <t>length is described in <xref target="framing" /> and applies to the RequestHeader together with the full request.</t>

        <t>RequestHeader is defined as follows and encoded using Jute (<xref target="jute" />):</t>

        <figure>
          <artwork><![CDATA[
  struct RequestHeader {
    sint32 xid
    sint32 opCode
  }
          ]]></artwork>
        </figure>

        <t>The xid field is used to identify the request on the connection. The client SHOULD set xid to a unique positive integer (except for special Ping requests, as described in <xref target="ping-request" />). Assigning xid values by counting from 1 is RECOMMENDED. <cref>TestZKCP_connect_startingXid, TestZKCP_connect_xidOutOfOrder, TestZKCP_connect_xidRepeated</cref></t>

        <t>TODO: overflow.</t>

        <t>opCode, sometimes called "type", specifies which type of operation is being performed. The following values are defined:</t>

        <texttable>
          <ttcol align="right">opCode Value</ttcol><ttcol>Operation</ttcol><ttcol>Apache ZooKeeper Release</ttcol>
          <c>0</c><c>Notification (TODO)</c><c>3.0</c>
          <c>1</c><c>Create v1 (<xref target="create-request" />)</c><c>3.0</c>
          <c>2</c><c>Delete (<xref target="delete-request" />)</c><c>3.0</c>
          <c>3</c><c>Exists (<xref target="exists-request" />)</c><c>3.0</c>
          <c>4</c><c>Get Data (<xref target="get-data-request" />)</c><c>3.0</c>
          <c>5</c><c>Set Data (<xref target="set-data-request" />)</c><c>3.0</c>
          <c>6</c><c>Get ACL (<xref target="get-acl-request" />)</c><c>3.0</c>
          <c>7</c><c>Set ACL (<xref target="set-acl-request" />)</c><c>3.0</c>
          <c>8</c><c>Get Children v1 (<xref target="get-children-request" />)</c><c>3.0</c>
          <c>9</c><c>Sync (<xref target="sync-request" />)</c><c>3.0</c>
          <!-- They seem to have skipped 10. -->
          <c>11</c><c>Ping (<xref target="ping-request" />)</c><c>3.0</c>
          <c>12</c><c>Get Children v2 (<xref target="get-children-request" />)</c><c>3.3</c>
          <c>13</c><c>Check Version (MUST NOT be used outside Multi <cref>TestZKCP_Multi_soloCheckVersion</cref>)</c><c>3.4</c>
          <c>14</c><c>Multi (<xref target="multi-request" />)</c><c>3.4</c>
          <c>15</c><c>Create v2 (<xref target="create-request" />)</c><c>3.5 (planned)</c>
          <c>16</c><c>Reconfigure cluster membership (out of scope)</c><c>3.5 (planned)</c>
          <c>17</c><c>Check Watches (TODO)</c><c>3.5 (planned)</c>
          <c>18</c><c>Remove Watches (TODO)</c><c>3.5 (planned)</c>
          <c>19</c><c>Create Container (<xref target="create-request" />)</c><c>3.5 (planned)</c>
          <c>20</c><c>Delete Container (TODO)</c><c>3.5 (planned)</c>
          <c>21</c><c>Create TTL (TODO)</c><c>3.6 (planned)</c>
          <c>100</c><c>Auth (TODO)</c><c>3.0</c>
          <c>101</c><c>Set Watches (<xref target="set-watches-request" />)</c><c>3.0</c>
          <c>102</c><c>SASL (TODO)</c><c>3.4</c>
          <c>-1</c><c>Error (TODO)</c><c>3.0</c>
          <c>-10</c><c>Create Session (TODO)</c><c>3.0</c>
          <c>-11</c><c>Close Session (TODO)</c><c>3.0</c>
        </texttable>

        <t>The format of the request itself is described in the following subsections and encoded using Jute (<xref target="jute" />).</t>

        <t>While server implementations MAY overlap processing of requests, they MUST appear to process requests in the order received. A server MUST NOT send responses out of order.</t>

        <t>If it responds, the server MUST use the following format:</t>

        <figure>
          <artwork><![CDATA[
  +-----------+------------------+------------+
  |  length   |  ResponseHeader  |  response  |
  +-----------+------------------+------------+]]></artwork>
        </figure>

        <t>length is described in <xref target="framing" /> and applies to the ResponseHeader together with the full response.</t>

        <t>ResponseHeader is defined as follows and encoded using Jute (<xref target="jute" />):</t>

        <figure>
          <artwork><![CDATA[
  struct ResponseHeader {
    sint32 xid
    sint64 zxid
    sint32 err
  }
          ]]></artwork>
        </figure>

        <t>The server MUST set xid to the xid provided by the client in the request.</t>

        <t>TODO: zxid</t>

        <t>The server MUST set err to 0 and add a response for requests that were processed successfully. The format of the response itself is described in the following subsections and encoded using Jute (<xref target="jute" />).</t>

        <t>The server MUST set err to a defined nonzero value for requests that did not succeed. In this case, it SHOULD NOT send an additional response.</t>

        <t>Any request may fail for the following reasons:</t>

        <texttable>
          <ttcol>err Value</ttcol><ttcol>Reason</ttcol>
          <c>-100</c><c>request invalid or not supported</c>
          <c>-102</c><c>TODO: no authentication</c>
          <c>-112</c><c>client session expired</c>
          <c>-115</c><c>TODO: authentication failed</c>
          <c>-116</c><c>TODO: closing</c>
          <c>-117</c><c>TODO: nothing</c>
          <c>-118</c><c>client session re-opened on another connection (session moved)</c>
        </texttable>

        <t>Additionally, individual requests may fail for other reasons defined in the following subsections.</t>

        <section anchor="exists-request" title="Exists">
          <figure>
            <artwork><![CDATA[
  struct ExistsRequest {
    ustring path
    bool    watch
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct ExistsResponse {
    Stat stat
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="get-data-request" title="Get Data">
          <figure>
            <artwork><![CDATA[
  struct GetDataRequest {
    ustring path
    bool    watch
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct GetDataResponse {
    byte[] data
    Stat   stat
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="get-acl-request" title="Get ACL">
          <figure>
            <artwork><![CDATA[
  struct GetACLRequest {
    ustring path
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct GetACLResponse {
    ACL[] acl
    Stat  stat
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="get-children-request" title="Get Children">
          <section title="Get Children v1">
            <figure>
              <artwork><![CDATA[
    struct GetChildrenRequestV1 {
      ustring path
      bool    watch
    }
              ]]></artwork>
            </figure>

            <figure>
              <artwork><![CDATA[
    struct GetChildrenResponseV1 {
      ustring[] children
    }
              ]]></artwork>
            </figure>
          </section>
          <section title="Get Children v2">
            <figure>
              <artwork><![CDATA[
    struct GetChildrenRequestV2 {
      ustring path
      bool    watch
    }
              ]]></artwork>
            </figure>

            <figure>
              <artwork><![CDATA[
    struct GetChildrenResponseV2 {
      ustring[] children
      Stat      stat
    }
              ]]></artwork>
            </figure>
          </section>
        </section>


        <section anchor="create-request" title="Create">
          <section title="Create v1">
            <figure>
              <artwork><![CDATA[
  struct CreateRequestV1 {
    ustring path
    byte[]  data
    ACL[]   acl
    int     flags
  }
              ]]></artwork>
            </figure>

            <figure>
              <artwork><![CDATA[
  struct CreateResponseV1 {
    ustring path
  }
              ]]></artwork>
            </figure>
          </section>

          <section title="Create v2">
            <figure>
              <artwork><![CDATA[
  struct CreateRequestV2 {
    ustring path
    byte[]  data
    ACL[]   acl
    int     flags
  }
              ]]></artwork>
            </figure>

            <figure>
              <artwork><![CDATA[
  struct CreateResponseV2 {
    ustring path
    Stat    stat
  }
              ]]></artwork>
            </figure>
          </section>

          <section title="Create Container">
            <t>This uses the same format as Create v2 but with flags set to 4.</t>

            <t>If a container znode has ever had children but has not had children for the last minute, the servers SHOULD delete the container and issue notifications on that removal.</t>

            <t>Can a container znode have data? Can create or create2 be used to create containers?</t>
          </section>
        </section>

        <section anchor="delete-request" title="Delete">
          <figure>
            <artwork><![CDATA[
  struct DeleteRequest {
    ustring path
    sint32  version
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct DeleteResponse {
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="set-data-request" title="Set Data">
          <figure>
            <artwork><![CDATA[
  struct SetDataRequest {
    ustring path
    byte[]  data
    sint32  version
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct SetDataResponse {
    Stat stat
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="set-acl-request" title="Set ACL">
          <figure>
            <artwork><![CDATA[
  struct SetACLRequest {
    ustring path
    ACL[]   acl
    sint32  version
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct SetACLResponse {
    Stat stat
  }
            ]]></artwork>
          </figure>
        </section>


        <section anchor="close-request" title="Close">
          <t>TODO: move elsewhere?</t>

          <figure>
            <artwork><![CDATA[
  struct CloseRequest {
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct CloseResponse {
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="sync-request" title="Sync">
          <figure>
            <artwork><![CDATA[
  struct SyncRequest {
    ustring path
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct SyncResponse {
    ustring path
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="set-watches-request" title="Set Watches">
          <figure>
            <artwork><![CDATA[
  struct SetWatchesRequest {
    sint64    relativeZxid
    ustring[] dataWatches
    ustring[] existWatches
    ustring[] childWatches
  }
            ]]></artwork>
          </figure>

          <figure>
            <artwork><![CDATA[
  struct SetWatchesResponse {
  }
            ]]></artwork>
          </figure>
        </section>

        <section anchor="multi-request" title="Multi (Transaction)">
          <t>Multi Requests are encoded as follows (after the RequestHeader):</t>

          <figure>
            <artwork><![CDATA[
  +----------------+--------+     +----------------+--------+-------+
  |  MultiHeader 1 |  op 1  | ... |  MultiHeader n |  op n  |  End  |
  +----------------+--------+     +----------------+--------+-------+
            ]]></artwork>
          </figure>

          <t>The client MAY send 0 or more operations <cref>TestZKCP_Multi_noOps</cref>. Each operation MUST be preceded by a MultiHeader.</t>

          <figure>
            <artwork><![CDATA[
  struct MultiHeader {
    sint32 type
    bool   done
    sint32 err
  }
            ]]></artwork>
          </figure>

          <t>type is the operation code. For each operation, the client MUST set type to one of the following:</t>

          <texttable>
            <ttcol>type Value</ttcol><ttcol>Operation</ttcol>
            <c>1</c><c>Create</c>
            <c>2</c><c>Delete</c>
            <c>5</c><c>Set Data</c>
            <c>13</c><c>Check Version</c>
          </texttable>

          <t>The client MUST set done to false and SHOULD set err to -1. <cref>TestZKCP_Multi_doneWithBadTypeAndErr, TestZKCP_Multi_opWithErrSet</cref></t>

          <t>Each operation defines its own format, as described in the following subsections.</t>

          <t>Following the final operation, the client MUST send the an additional MultiHeader (labeled "End") with done set to true. The client SHOULD set set type to -1 and err to -1. <cref>TestZKCP_Multi_doneWithBadTypeAndErr</cref></t>

          <t>Multi Responses are encoded as follows (after the ResponseHeader):</t>
          <figure>
            <artwork><![CDATA[
  +----------------+-----------+     +----------------+-----------+-------+
  |  MultiHeader 1 |  reply 1  | ... |  MultiHeader n |  reply n  |  End  |
  +----------------+-----------+     +----------------+-----------+-------+
            ]]></artwork>
          </figure>

          <t>The replies correspond to the operations in the request, in order. Each reply is preceded by a MultiHeader. After the replies, the server MUST send an additional MultiHeader (labeled "End") with done set to true, type set to -1, and err set to -1 <cref>TestZKCP_Multi_noOps</cref>.</t>

          <t>The server MUST set done in each operation's MultiHeader to false.</t>

          <t>For each operation in a successful multi request, the server MUST set type to the operation code sent in the request, MUST set err to 0, and MUST include the operation-specific reply as defined in the following subsections.</t>

          <t>For each operation in a failed multi request, the server MUST set type to -1. The err value for the first operation to fail in a Multi request MUST be one defined by the following subsections. The err value for all preceding operations MUST be 0 and for all subsequent operations MUST be -2. In place of the replies, the server MUST send a MultiErrorResponse with the same err value per operation.</t>

          <figure>
            <artwork><![CDATA[
  struct MultiErrorResponse {
    sint32 err
  }
            ]]></artwork>
          </figure>

          <section title="Multi: Create">
            <t>Multi Create is the same as normal Create requests (<xref target="create-request" />).</t>
          </section>
          <section title="Multi: Delete">
            <t>Multi Create is the same as normal Delete requests (<xref target="delete-request" />).</t>
          </section>
          <section title="Multi: Set Data">
            <t>Multi Create is the same as normal Set Data requests (<xref target="set-data-request" />).</t>
          </section>
          <section title="Multi: Check Version">
            <t>Note: The opCode 13 assigned to Multi: Check Version MUST NOT be used as a normal request. Doing so will cause some Apache ZooKeeper servers to crash. <cref>TestZKCP_Multi_soloCheckVersion</cref></t>

            <figure>
              <artwork><![CDATA[
  struct CheckVersionRequest {
    ustring path
    sint32 version
  }
              ]]></artwork>
            </figure>

            <figure>
              <artwork><![CDATA[
  struct CheckVersionResponse {
  }
              ]]></artwork>
            </figure>
          </section>
        </section>
      </section>

      <section anchor="notifications" title="Notifications">
        <t>In addition to sending responses, the server MUST send notifications to interested clients after certain events.</t>

        <t>TODO: May the server generate spurious notificaitons?</t>

        <t>Notifications take the following form:</t>

        <figure>
          <artwork><![CDATA[
  +-----------+------------------+----------------+
  |  length   |  ResponseHeader  |  WatcherEvent  |
  +-----------+------------------+----------------+]]></artwork>
        </figure>

        <t>length is described in <xref target="framing" /> and applies to the ResponseHeader together with the WatcherEvent.</t>

        <t>ResponseHeader is described in <xref target="requests" /> and encoded using Jute (<xref target="jute" />). The server MUST set the ResponseHeader's xid to -1, MUST set the zxid to that of the request which caused the notification, and MUST set err to 0.</t>

        <t>WatcherEvent is encoded using Jute (<xref target="jute" />) and defined as follows:</t>

        <figure>
          <artwork><![CDATA[
  struct WatcherEvent {
    sint32  type
    sint32  state
    ustring path
  }
          ]]></artwork>
        </figure>

        <t>The server MUST set type to one of the following:</t>

        <texttable>
          <ttcol>type Value</ttcol><ttcol>Event Description</ttcol>
          <c>1</c><c>znode created</c>
          <c>2</c><c>znode deleted</c>
          <c>3</c><c>znode data changed</c>
          <c>4</c><c>direct child of znode created or removed</c>
        </texttable>

        <t>The server SHOULD set state to 3. TODO: always? why?</t>

        <t>The server MUST set path to the absolute path of the affected znode.</t>
      </section>

      <section anchor="IANA" title="IANA Considerations">
        <t>This memo includes no request to IANA.</t>
        <!--
        <t>All drafts are required to have an IANA considerations section (see
        <xref target="RFC5226">Guidelines for Writing an IANA Considerations Section in RFCs</xref> for a guide). If the draft does not require IANA to do
        anything, the section contains an explicit statement that this is the
        case (as above). If there are no requirements for IANA, the section will
        be removed during conversion into an RFC by the RFC Editor.</t>
      -->
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section.
        See <xref target="RFC3552" /> for a guide.</t>
      </section>
    </middle>

    <back>

      <references title="Normative References">
        &RFC2119;

        &RFC2253;

        &RFC4422;

        &RFC7414;
      </references>

      <references title="Informative References">
        &RFC3552;

        &RFC5226;
      </references>

    </back>
  </rfc>
